#
#                                Copyright (C) 2017 by Rafael Santiago
#
# This is a free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#

include ~/toolsets/gas/gas-app.hsl
include ~/fsutil.hsl

local var sources type list;
local var includes type list;
local var cflags type list;
local var libraries type list;
local var ldflags type list;

project life : toolset "gas-app" : $sources, $includes, $cflags, $libraries, $ldflags, "life";

life.prologue()
{

    installer();

    $includes = hefesto.sys.get_option("includes");
    $cflags = hefesto.sys.get_option("cflags");
    $libraries = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");

    $sources.ls(".*\\.s$");


    if (hefesto.sys.os_name() != "sunos" && hefesto.sys.os_name() != "windows") {
        var dlinker type string;
        $dlinker = "-dynamic-linker " + ldpath();

        if (hefesto.sys.os_name() == "linux") {
            $ldflags.add_item("-m elf_i386");
        } else if (hefesto.sys.os_name() == "freebsd") {
            $ldflags.add_item("-m elf_i386_fbsd");
            $cflags.add_item("-defsym __FreeBSD__=1");
        } else if (hefesto.sys.os_name() == "openbsd") {
            $ldflags.add_item("-m elf_i386_obsd");
            $cflags.add_item("-defsym __OpenBSD__=1");
        } else if (hefesto.sys.os_name() == "netbsd") {
            $ldflags.add_item("-m elf_i386");
            $cflags.add_item("-defsym __NetBSD__=1");
        } else if (hefesto.sys.os_name() == "minix") {
            $ldflags.add_item("-m elf_i386_minix");
        }

        $ldflags.add_item($dlinker);
    } else if (hefesto.sys.os_name() == "windows") {
        $cflags.add_item("-defsym _WIN32=1");
        $cflags.add_item("-no-warn");
        $ldflags.del_item("-lc");
    }
}

local function ldpath() : result type string {
    var path type string;
    var data type list;

    $data = hefesto.sys.get_option("ld-path");

    if ($data.count() > 0) {
        $path = $data.item(0);
    }

    if ($path.len() == 0) {

        $data = hefesto.sys.lines_from_file(".ldpath", ".*");
        if ($data.count() > 0) {
            $path = $data.item(0);
        } else {
            if (hefesto.sys.os_name() == "freebsd") {
                $path = "/usr/libexec/ld-elf.so.1";
            } else if (hefesto.sys.os_name() == "openbsd") {
                $path = "/usr/libexec/ld.so";
            } else if (hefesto.sys.os_name() == "linux") {
                $path = "/lib/ld-linux.so.2";
            } else if (hefesto.sys.os_name() == "netbsd" || hefesto.sys.os_name() == "minix") {
                $path = "/usr/libexec/ld.elf_so";
            }
        }

        if (isfile($path) == 0) {
            $path = hefesto.sys.prompt("WARN: The dynamic loader path " + $path + " is unaccessible... Input a new valid one: ");
            if (isfile($path) == 0) {
                hefesto.sys.echo("ERROR: Unable to define a valid path to your dynamic loader.\n");
                hefesto.project.abort(1);
            }
            var fp type file;
            $fp = hefesto.sys.fopen(".ldpath", "w");
            hefesto.sys.fwrite($path, $path.len(), $fp);
            hefesto.sys.fclose($fp);
        }
    }

    result $path;
}


local function installer() : result type none {
    var option type list;
    $option = hefesto.sys.get_option("install");

    if ($option.count() > 0) {
        hefesto.project.abort(install());
    }

    $option = hefesto.sys.get_option("uninstall");

    if ($option.count() > 0) {
        hefesto.project.abort(uninstall());
    }
}

local function install() : result type int {
    var dest_path type string;
    var bin_path type string;

    if (hefesto.sys.os_name() != "windows") {
        $bin_path = "../bin/life";
    } else {
        $bin_path = "..\\bin\\life.exe";
    }

    if (isfile($bin_path) == 0) {
        var exit_code type int;
        $exit_code = hefesto.sys.run("hefesto");
        if ($exit_code != 0) {
            result $exit_code;
        }
    }

    if (hefesto.sys.os_name() != "windows") {
        $dest_path = "/usr/games";

        if (isdir($dest_path) == 0) {
            $dest_path = "/usr/local/bin";
            mktree($dest_path); # INFO(Rafael): Usually even not existing it is "exported" by default on some *nix.
        }

        $dest_path = hefesto.sys.make_path($dest_path, "life");
    } else {
        $dest_path = "c:\\life\\";
        mktree($dest_path);
        $dest_path = hefesto.sys.make_path($dest_path, "life.exe");
    }

    if (isfile($dest_path)) {
        var options type list;
        $options.add_item("y");
        $options.add_item("Y");
        $options.add_item("n");
        $options.add_item("N");

        var choice type string;
        $choice = question("Do you want to overwrite the file " + $dest_path + "? [y/n] ", $options);

        if ($choice == "n" || $choice == "N") {
            hefesto.sys.echo("INFO: Aborted.\n");
            result 1;
        }
    }

    if (hefesto.sys.cp($bin_path, $dest_path) != 1) {
        hefesto.sys.echo("ERROR: Unable to copy the binary to '" + $dest_path + "'.\n");
        result 1;
    }

    if (hefesto.sys.os_name() != "windows") {
        mktree("/usr/local/man/man6");

        if (hefesto.sys.cp("../man/life.6", "/usr/local/man/man6/life.6") != 1) {
            hefesto.sys.echo("WARN: Unable to copy the man page to '/usr/local/man/man6/life.6'.\n");
            result 1;
        }
    }

    hefesto.sys.echo("INFO: Installed.\n");

    result 0;
}

local function uninstall() : result type int {
    var answers type list;

    $answers.add_item("Y");
    $answers.add_item("y");
    $answers.add_item("N");
    $answers.add_item("n");

    var answer type string;
    $answer = question("Do you want to uninstall it? [y/n] ", $answers);

    if ($answer == "n" || $answer == "N") {
        hefesto.sys.echo("INFO: Aborted.\n");
        result 1;
    }

    if (hefesto.sys.os_name() != "windows") {
        hefesto.sys.rm("/usr/games/life");
        hefesto.sys.rm("/usr/local/bin/life");
        hefesto.sys.rm("/usr/local/man/man6/life.6");
    } else {
        hefesto.sys.rm("c:\\life\\life.exe");
        var cwd type string;
        $cwd = hefesto.sys.pwd();
        if (hefesto.sys.cd("C:\\life\\")) {
            if (hefesto.sys.ls(".*") == 0) {
                hefesto.sys.cd("..");
                hefesto.sys.rmdir("C:\\life");
            }
            hefesto.sys.cd($cwd);
        }
    }

    hefesto.sys.echo("INFO: Uninstalled.\n");

    result 0;
}

local function question(qstr type string, answers type list) : result type string {
    var a type string;

    $a = "";

    while ($answers.index_of($a) == -1) {
        $a = hefesto.sys.prompt($qstr);
    }

    result $a;
}
